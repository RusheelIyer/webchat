{"version":3,"sources":["WebChat.js","DataPrivacy.js","customize/Customize.js","customize/FeedbackButtons.js","MainWebChat.js","App.js","serviceWorker.js","index.js"],"names":["WebChat","className","onFetchToken","store","token","styleOptions","activityMiddleware","activityStatusMiddleware","directLine","useMemo","createDirectLine","useEffect","locale","DataPrivacy","props","submitDataPrivacy","bind","ip","$","getJSON","data","geobytesipaddress","this","onChange","href","target","rel","type","onClick","React","Component","Customize","cookies","state","botName","get","gender","avatar","typing","responseTime","applyChanges","handleInput","newBotName","value","newGender","newAvatar","newTyping","newResponseTime","set","path","setState","id","selected","textInput","title","for","name","defaultValue","renderGenderSelect","renderAvatarSelect","renderTypingSelect","renderResponseSelect","class","withCookies","FeedbackButtons","likeCliked","dislikeClicked","clickLike","clickDislike","saveFeedback","feedback","dispatch","payload","likeClicked","jsonMessage","activity","text","JSON","stringify","attachments","messageDetails","conversationID","conversation","message","timestamp","btn_class","btn_classDislike","children","useState","setBotName","storedConsent","createStore","getState","next","action","language","window","navigator","from","role","loaded","setLoaded","minimized","setMinimized","newMessage","setNewMessage","acceptedData","setAcceptedData","setToken","getAvatarUrl","customize","setCustomize","avatarUrl","setAvatarUrl","showAvatar","setShowAvatar","typingIndicator","setTypingIndicator","typingSpeed","setTypingSpeed","hideUploadButton","bubbleBackground","bubbleFromUserBackground","bubbleFromUserTextColor","botAvatarImage","timestampFormat","groupTimestamp","botAvatarInitials","changeTypingSettings","a","showTyping","speed","handleFetchToken","useCallback","fetch","method","headers","res","json","handleMaximizeButtonClick","handleMinimizeButtonClick","handleCustomizeButtonClick","Provider","classNames","size","card","messageText","sender","Fragment","args","sendState","sameTimestampGroup","closePanel","show","config","accepted","App","CookiesProvider","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.d5a56e1f.chunk.js","sourcesContent":["import React, { useEffect, useMemo } from 'react';\nimport ReactWebChat, { createDirectLine } from 'botframework-webchat';\n\nimport { FaRobot } from \"react-icons/fa\";\nimport './WebChat.css';\n\nconst WebChat = ({ className, onFetchToken, store, token, styleOptions, activityMiddleware, activityStatusMiddleware }) => {\n  const directLine = useMemo(() => createDirectLine({ token }), [token]);\n\n  useEffect(() => {\n    onFetchToken();\n  }, [onFetchToken]);\n\n  return token ? (\n    <ReactWebChat\n      className={`${className || ''} web-chat`}\n      directLine={directLine}\n      store={store}\n      styleOptions={styleOptions}\n      activityMiddleware={activityMiddleware}\n      activityStatusMiddleware={activityStatusMiddleware}\n      locale='en-US'\n    />\n  ) : (\n    <div className={`${className || ''} connect-spinner`}>\n      <div className=\"content\">\n        <div className=\"icon\">\n          <FaRobot />\n        </div>\n        <p>Please wait while we are connecting.</p>\n      </div>\n    </div>\n  );\n};\n\nexport default WebChat;\n","import React from 'react';\nimport $ from 'jquery';\n\nimport './DataPrivacy.css'\n\nexport default class DataPrivacy extends React.Component {\n\n    constructor(props) {\n        super(props)\n\n        this.submitDataPrivacy = this.submitDataPrivacy.bind(this);\n    }\n\n    submitDataPrivacy() {\n        let ip = null;\n        $.getJSON('http://gd.geobytes.com/GetCityDetails?callback=?', function(data) {\n            ip = data.geobytesipaddress;\n        });\n        this.props.onChange(true, ip);\n    }\n\n    render() {\n        return (<div className='data_privacy'>\n            <div className='data_privacy_header'>\n                Declaration of Consent\n            </div>\n            <div className='data_privacy_text'>\n                I have read the <a href=\"https://issd.iism.kit.edu/1527.php\" target=\"_blank\" rel=\"noopener noreferrer\">privacy policy</a> and hereby agree that the content of my messages to the chatbot is sent to Microsoft servers for language processing purposes. I further agree that my anonymized data can be used for scientific purposes. I am aware that I can revoke my consent at any time.\n            </div>\n            <button className=\"accept\" type=\"button\" onClick={this.submitDataPrivacy}>\n                Accept\n            </button>\n        </div>);\n    }\n\n}\n","import React from 'react';\nimport { FaQuestionCircle } from \"react-icons/fa\";\n\nimport $ from 'jquery';\nimport { instanceOf } from 'prop-types';\nimport { withCookies, Cookies } from 'react-cookie';\n\nimport './Customize.css';\n\nclass Customize extends React.Component {\n\n    static propTypes = {\n        cookies: instanceOf(Cookies).isRequired\n    };\n\n    constructor(props) {\n        super(props);\n\n        const { cookies } = props;\n\n        this.state = {\n            botName: cookies.get('botName') || 'ISSDBot',\n            gender: cookies.get('gender') || 'female',\n            avatar: cookies.get('avatar') || 'true',\n            typing: cookies.get('typing') || 'true',\n            responseTime: cookies.get('responseTime') || 'medium'\n        };\n\n        this.applyChanges = this.applyChanges.bind(this);\n        this.handleInput = this.handleInput.bind(this);\n    }\n\n    async applyChanges() {\n\n        const { cookies } = this.props;\n\n        var newBotName = $('#bot-name')[0].value;\n        var newGender = $('#gender')[0].value;\n        var newAvatar = $('#avatar')[0].value;\n        var newTyping = $('#typing')[0].value;\n        var newResponseTime = $('#response-time')[0].value;\n\n        cookies.set('botName', newBotName, { path: '/' });\n        cookies.set('gender', newGender, { path: '/' });\n        cookies.set('avatar', newAvatar, { path: '/' });\n        cookies.set('typing', newTyping, { path: '/' });\n        cookies.set('responseTime', newResponseTime, { path: '/' });\n\n        await this.setState({\n            botName: newBotName,\n            gender: newGender,\n            avatar: newAvatar,\n            typing: newTyping,\n            responseTime: newResponseTime\n        });\n\n        this.props.onChange(this.state, true);\n    }\n\n    renderGenderSelect() {\n        var gender = this.state.gender;\n        switch (gender) {\n            case 'female':\n                return <select id=\"gender\">\n                    <option value=\"none\">None</option>\n                    <option value=\"male\">Male</option>\n                    <option selected = \"selected\" value=\"female\">Female</option>\n                </select>;\n            case 'male':\n                return <select id=\"gender\">\n                    <option value=\"none\">None</option>\n                    <option selected = \"selected\" value=\"male\">Male</option>\n                    <option value=\"female\">Female</option>\n                </select>;\n            default:\n                return <select id=\"gender\">\n                    <option selected = \"selected\" value=\"none\">None</option>\n                    <option value=\"male\">Male</option>\n                    <option value=\"female\">Female</option>\n                </select>;\n        }\n    }\n\n    renderAvatarSelect() {\n        var avatar = this.state.avatar;\n        if (avatar === 'true') {\n            return <select id=\"avatar\">\n                <option selected = \"selected\" value=\"true\">Yes</option>\n                <option value=\"false\">No</option>\n            </select>;\n        }\n        return <select id=\"avatar\">\n            <option value=\"true\">Yes</option>\n            <option selected = \"selected\" value=\"false\">No</option>\n        </select>;\n    }\n\n    renderTypingSelect() {\n        var typing = this.state.typing;\n        if (typing === 'true') {\n            return <select id=\"typing\">\n                <option selected = \"selected\" value=\"true\">Yes</option>\n                <option value=\"false\">No</option>\n            </select>;\n        }\n        return <select id=\"typing\">\n            <option value=\"true\">Yes</option>\n            <option selected = \"selected\" value=\"false\">No</option>\n        </select>;\n    }\n\n    renderResponseSelect() {\n        var responseTime = this.state.responseTime;\n\n        switch (responseTime) {\n            case 'fast':\n                return <select id=\"response-time\">\n                    <option selected = \"selected\" value=\"fast\">Fast</option>\n                    <option value=\"medium\">Medium</option>\n                    <option value=\"slow\">Slow</option>\n                </select>;\n            case 'medium':\n                return <select id=\"response-time\">\n                    <option value=\"fast\">Fast</option>\n                    <option selected = \"selected\" value=\"medium\">Medium</option>\n                    <option value=\"slow\">Slow</option>\n                </select>;\n            default:\n                return <select id=\"response-time\">\n                    <option value=\"fast\">Fast</option>\n                    <option value=\"medium\">Medium</option>\n                    <option selected = \"selected\" value=\"slow\">Slow</option>\n                </select>;\n        }\n    }\n\n    async handleInput() {\n        const { cookies } = this.props;\n        const textInput = $(\"#bot-name\")[0];\n        cookies.set('botName', textInput.value, { path: '/' });\n        \n        await this.setState({botName: textInput.value});\n        this.props.onChange(this.state, false);\n    }\n\n    render() {\n\n        return <div className=\"edit\">\n            <div className=\"label\">\n                <FaQuestionCircle title=\"Change the name of the bot visible under each of the bot's messages.\"/> <label for=\"bot-name\"> &nbsp;Bot Name:</label>\n            </div>\n            <input type=\"text\" id=\"bot-name\" name=\"bot-name\" onChange={this.handleInput} defaultValue={this.state.botName}/>\n            <br />\n            <div className=\"label\">\n                <FaQuestionCircle title=\"Changes the appearance of the image of the bot.\"/> <label for=\"gender\"> &nbsp;Gender: </label>\n            </div>\n            {this.renderGenderSelect()}\n            <br />\n            <div className=\"label\">\n                <FaQuestionCircle title=\"Either see an image of the bot, or just the initials of the bot's name.\"/>  <label for=\"avatar\"> &nbsp;Avatar: </label>\n            </div>\n            {this.renderAvatarSelect()}\n            <br />\n            <div className=\"label\">\n                <FaQuestionCircle title=\"See when the bot is typing.\"/> <label for=\"typing\"> &nbsp;Typing Indicator: </label>\n            </div>\n            {this.renderTypingSelect()}\n            <br />\n            <div className=\"label\">\n                <FaQuestionCircle title=\"Set how quickly would you like the bot to respond.\"/> <label for=\"response-time\"> &nbsp;Response Time: </label>\n            </div>\n            {this.renderResponseSelect()}\n            <br /><br />\n            <div class=\"center\">\n                <button className= \"apply\" onClick={this.applyChanges}>Apply</button>\n            </div>\n        </div>;\n    }\n}\n\nexport default withCookies(Customize);\n","import React from 'react';\nimport { FaThumbsUp, FaThumbsDown } from \"react-icons/fa\";\n\nimport './FeedbackButtons.css';\n\nexport default class FeedbackButtons extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            likeCliked: false,\n            dislikeClicked: false\n        }\n\n        this.clickLike = this.clickLike.bind(this);\n        this.clickDislike = this.clickDislike.bind(this);\n        this.saveFeedback = this.saveFeedback.bind(this);\n    }\n\n    saveFeedback(feedback) {\n        this.props.store.dispatch({\n          type: 'WEB_CHAT/SEND_EVENT',\n          payload: {\n            name: 'webchat/saveFeedback',\n            value: feedback\n          }\n        });\n      }\n\n    async clickLike(){\n        if (!this.state.likeClicked && !this.state.dislikeClicked) {\n            //Stringify the entire json message in case of an adaptive card and not text message\n            var jsonMessage = this.props.activity.text ? this.props.activity.text : JSON.stringify(this.props.activity.attachments);\n            var messageDetails = {\n                conversationID: this.props.activity.conversation.id,\n                message: jsonMessage,\n                feedback: \"Like\",\n                timestamp: this.props.activity.timestamp\n            };\n\n            await this.setState({likeClicked: true});\n            this.saveFeedback(messageDetails);\n        }\n    }\n\n    async clickDislike() {\n        \n        if (!this.state.likeClicked && !this.state.dislikeClicked) {\n            //Stringify the entire json message in case of an adaptive card and not text message\n            var jsonMessage = this.props.activity.text ? this.props.activity.text : JSON.stringify(this.props.activity.attachments);\n            var messageDetails = {\n                conversationID: this.props.activity.conversation.id,\n                message: jsonMessage,\n                feedback: \"Dislike\",\n                timestamp: this.props.activity.timestamp\n            };\n            await this.setState({dislikeClicked: true});\n            this.saveFeedback(messageDetails);\n        }\n    }\n\n    render() {\n\n        let btn_class = this.state.likeClicked ? \"feedbackButton__buttonClicked\" : \"feedbackButton__button\";\n        let btn_classDislike = this.state.dislikeClicked ? \"feedbackButton__buttonClicked\" : \"feedbackButton__button\";\n\n        return <div className=\"feedbackButton\">\n                <div className=\"feedbackButton__content\">{this.props.children}</div>\n                <div className=\"feedbackButton__bar\">\n                    <button id=\"like\" className={btn_class} onClick={this.clickLike}>\n                        <FaThumbsUp />\n                    </button>\n                    <button id=\"dislike\" className={btn_classDislike} onClick={this.clickDislike}>\n                        <FaThumbsDown />\n                    </button>\n                </div> \n        </div>;\n    }\n}\n","import classNames from 'classnames';\nimport React, { useCallback, useMemo, useState } from 'react';\nimport { createStore } from 'botframework-webchat';\nimport { withCookies } from 'react-cookie';\n\nimport $ from 'jquery';\n\nimport { IconContext } from 'react-icons';\nimport { FaComments, FaCircle, FaCaretRight, FaPen, FaCaretDown } from \"react-icons/fa\";\n\nimport WebChat from './WebChat';\nimport DataPrivacy from './DataPrivacy';\nimport Customize from './customize/Customize';\nimport FeedbackButtons from './customize/FeedbackButtons';\n\nimport './MainWebChat.css';\n\nconst MainWebChat = ({cookies}) => {\n\n  const [botName, setBotName] = useState(cookies.get('botName') || 'ISSDBot');\n\n  const activityMiddleware = () => next => card => {\n    if (card.activity.from.role === 'bot' && (card.activity.text || card.activity.attachments)) {\n\n      var messageText = card.activity.text ? card.activity.text : JSON.stringify(card.activity.attachments);\n\n      store.dispatch({\n        type: 'WEB_CHAT/SEND_EVENT',\n        payload: {\n          name: 'webchat/saveMessage',\n          value: {\n            sender: card.activity.from.id,\n            conversationID: card.activity.conversation.id,\n            message: messageText,\n            timestamp: card.activity.timestamp\n          }\n        }\n      });\n\n      return (children) => (\n        <React.Fragment>\n          <FeedbackButtons store={store} activity={card.activity}>\n            {next(card)(children)}\n          </FeedbackButtons>\n        </React.Fragment>);\n    } else {\n      return (children) => (\n        <React.Fragment>\n        { next(card)(children) }\n        </React.Fragment>);\n    }\n  };\n\n  const activityStatusMiddleware = () => next => args => {\n    const {\n      activity: {\n        from: { role }\n      },\n      sendState,\n      sameTimestampGroup\n    } = args;\n    if (sendState === 'sending') {\n      return <span className=\"activityStatus activityStatus__sendStatus\">Sending&hellip;</span>;\n    } else if (sendState === 'send failed') {\n      return <span className=\"activityStatus\">Send failed.</span>;\n    } else if (!sameTimestampGroup) {\n      return (\n      <span className=\"activityStatus activityStatus__timestamp\">\n        <span className=\"activityStatus__timestampPretext\">{role === 'user' ? 'You on ' : botName + ' on '}</span>\n        <span>{next(args)}</span>\n      </span>);\n    }\n      return next(args);\n    };\n\n  var storedConsent = false;\n  const store = useMemo(\n    () =>\n      createStore({}, ({ dispatch, getState }) => next => action => {\n        if (action.type === 'DIRECT_LINE/CONNECT_FULFILLED') {\n          dispatch({\n            type: 'WEB_CHAT/SEND_EVENT',\n            payload: {\n              name: 'webchat/join',\n              value: {\n                language: window.navigator.language\n              }\n            }\n          });\n\n        } else if (action.type === 'DIRECT_LINE/INCOMING_ACTIVITY') {\n          if (action.payload.activity.from.role === 'bot') {\n\n            $.getJSON('http://gd.geobytes.com/GetCityDetails?callback=?', function(data) {\n                if (!storedConsent) {\n                  store.dispatch({\n                    type: 'WEB_CHAT/SEND_EVENT',\n                    payload: {\n                      name: 'webchat/saveConsent',\n                      value: {ip:data.geobytesipaddress}\n                    }\n                  });\n                  storedConsent = true;\n                }\n              });\n          }\n        }\n        return next(action);\n      }),\n    [storedConsent]\n  );\n\n  const [loaded, setLoaded] = useState(false);\n  const [minimized, setMinimized] = useState(true);\n  const [newMessage, setNewMessage] = useState(false);\n  const [acceptedData, setAcceptedData] = useState(false);\n  \n  const [token, setToken] = useState();\n\n  const getAvatarUrl = (gender) => {\n    switch (gender) {\n      case 'female':\n        return \"https://img.icons8.com/officel/40/000000/user-female.png\";\n      case 'male':\n        return \"https://img.icons8.com/officel/40/000000/user-male.png\";\n      default:\n        return \"https://img.icons8.com/ultraviolet/40/000000/bot.png\";\n    }\n  }\n\n  const [customize, setCustomize] = useState(false);\n  const [avatarUrl, setAvatarUrl] = useState( getAvatarUrl(cookies.get('gender') || 'female') );\n  const [showAvatar, setShowAvatar] = useState(cookies.get('avatar') ? cookies.get('avatar') === 'true' : true);\n  const [typingIndicator, setTypingIndicator] = useState(cookies.get('typing') ? cookies.get('typing') === 'true' : true);\n  const [typingSpeed, setTypingSpeed] = useState(cookies.get('responseTime') || 'medium');\n\n  var styleOptions = showAvatar ? {\n    hideUploadButton: true,\n    bubbleBackground: '#F9F9F9',\n    bubbleFromUserBackground: '#EF7B00',\n    bubbleFromUserTextColor: 'White',\n    botAvatarImage: avatarUrl,\n    timestampFormat: 'absolute',\n    groupTimestamp: 2000\n  } : {\n    hideUploadButton: true,\n    bubbleBackground: '#F9F9F9',\n    bubbleFromUserBackground: '#EF7B00',\n    bubbleFromUserTextColor: 'White',\n    botAvatarInitials: botName[0],\n    timestampFormat: 'absolute',\n    groupTimestamp: 2000\n  };\n\n  const saveConfigDB = (config) => {\n    \n    store.dispatch({\n      type: 'WEB_CHAT/SEND_EVENT',\n      payload: {\n        name: 'webchat/saveConfig',\n        value: config\n      }\n    });\n\n  }\n\n  /**\n   * If the user changes the name in the customize panel\n   * i.e. enters text in the given input field, the name\n   * of the bot is updated.\n   */\n  const changeBotName = (name) => {\n    if (name !== '') {\n      setBotName(name);\n    }\n  }\n\n  /**\n   * If the user wants to see an avatar, i.e. show is true\n   * set the avatar's image according to the gender chosem\n   * otherwise show no avatar\n   */\n  const changeAvatar = (show, gender) => {\n    if (show === 'true') {\n      setAvatarUrl(getAvatarUrl(gender));\n      setShowAvatar(true);\n    } else {\n      setShowAvatar(false);\n    }\n  }\n\n  /**\n   * If the user has made changes to the typing settings\n   * i.e. show the typing indicator or not/change the speed of the typing indicator\n   * send a message to the bot indicating the corresponding wishes\n   */\n  const changeTypingSettings = async (typing, responseTime) => {\n\n    var showTyping = (typing === 'true');\n    if (showTyping !== typingIndicator) {\n      setTypingIndicator(showTyping);\n\n      store.dispatch({\n        type: 'WEB_CHAT/SEND_EVENT',\n        payload: {\n          name: 'webchat/sendTypingIndicator',\n          value: { typingIndicator: typing}\n        }\n      });\n    }\n\n    if (showTyping && (responseTime !== typingSpeed)) {\n      setTypingSpeed(responseTime);\n\n      store.dispatch({\n        type: 'WEB_CHAT/SEND_EVENT',\n        payload: {\n          name: 'webchat/sendTypingSpeed',\n          value: {speed: responseTime}\n        }\n      });\n    }\n  }\n\n  const handleFetchToken = useCallback(async () => {\n    if (!token) {\n      const res = await fetch('https://directline.botframework.com/v3/directline/tokens/generate', { method: 'POST', headers: { 'Authorization': 'Bearer C3lV9aXOawY.W51C_66Rz6x5X6UfTywGq0LDNV81q5rk0HBrAnWK5vE' }});\n      const { token } = await res.json();\n\n      setToken(token);\n    }\n  }, [setToken, token]);\n\n  const handleMaximizeButtonClick = useCallback(async () => {\n    setLoaded(true);\n    setMinimized(false);\n    setNewMessage(false);\n  }, [setMinimized, setNewMessage]);\n\n  const handleMinimizeButtonClick = useCallback(() => {\n    setMinimized(true);\n    setNewMessage(false);\n  }, [setMinimized, setNewMessage]);\n\n  const handleCustomizeButtonClick = useCallback(() => {\n    setCustomize(customize ? false : true);\n    setNewMessage(false);\n  }, [setCustomize, customize, setNewMessage]);\n\n  const onValueChange = (value, closePanel) => {\n    if (closePanel) {\n      saveConfigDB(value);\n      setCustomize(false);\n      changeAvatar(value.avatar, value.gender);\n      changeTypingSettings(value.typing, value.responseTime);\n    }\n    changeBotName(value.botName);\n  };\n\n  const submitPrivacy = (accepted, ip) => {\n    setAcceptedData(accepted);\n  }\n\n  return (\n    <div className=\"main-web-chat\">\n      {minimized && (\n        <button className=\"maximize\" onClick={handleMaximizeButtonClick}>\n          <FaComments />\n          {newMessage &&\n            <IconContext.Provider value={{ className: 'blue-dot' }}>\n              <FaCircle />\n            </IconContext.Provider> }\n        </button>\n      )}\n      {loaded && (\n          <div className={classNames('chat-box', minimized ? 'hide' : '')}>\n          <header>\n            <div className=\"filler\" />\n            <IconContext.Provider value={{ size: '1.5em' }}>\n            <button className=\"minimize\" onClick={handleMinimizeButtonClick}>\n                <FaCaretDown> Customize </FaCaretDown>\n            </button>\n            {acceptedData ?\n              [<button className=\"customize\" onClick={handleCustomizeButtonClick}>\n              Customize&nbsp;&nbsp;\n              { customize ?\n                <FaCaretRight /> :\n                <FaPen />\n              }</button>] : null}\n            </IconContext.Provider>\n          </header>\n          {acceptedData ?\n            [<WebChat\n                className=\"react-web-chat\"\n                onFetchToken={handleFetchToken}\n                store={store}\n                styleOptions = {styleOptions}\n                token={token}\n                activityMiddleware={activityMiddleware}\n                activityStatusMiddleware={activityStatusMiddleware}\n            />,\n            customize ? (\n              <Customize onChange={onValueChange} />\n              ) : null]\n            : <DataPrivacy onChange={submitPrivacy}/>}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default withCookies(MainWebChat);\n","import React from 'react';\nimport { CookiesProvider } from 'react-cookie';\n\nimport MainWebChat from './MainWebChat';\n\nconst App = () => (\n  <div className=\"App\">\n    <CookiesProvider>\n        <MainWebChat />\n    </CookiesProvider>\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}